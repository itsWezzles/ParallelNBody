/** @file KernelSkeleton
 * @brief An example Kernel implementation that explains the required and
 * optional methods and types that define a Kernel class.
 *
 * This class will be used to evaluate the matrix-vector product
 * r_i = sum_j K(t_i, s_j) c_j
 * for all i where K is the Kernel defined by this class.

 * A kernel is a function:
 * K : (target_type, source_type) -> kernel_value_type
 * The types in the matrix-vector product are
 * result_type = kernel_value_type * charge_type
 *
 * The source_type and target_type must be castable to a point_type. FMMs and
 * Treecodes use spacial trees to partition the sources and targets so they must
 * define a dimension and point_type.
 *
 * Many Kernels will specify source, target, and point types that are the same.
 * Other Kernels must ensure that
 * static_cast<point_type>(target_type)
 * and
 * static_cast<point_type>(source_type)
 * operate as expected.
 *
 * MORE on Tree Operations.
 */

#include "numeric/Vec.hpp"


/** @struct KernelSkeleton
 * @brief A short description of an implemented Kernel. The Kernel class
 * need only define the types required in the equation
 * result = K(target,source) * charge
 * and the operator() to compute the kernel.
 */
struct KernelSkeleton
{
  //! Return type of a kernel evaluation
  typedef double kernel_value_type;

  //! Source type
  typedef Vec<3,double> source_type;
  //! Charge type associated with each source
  //! The primitive type of the vector in the matvec
  // TODO: Accept anything algebraically compatable with kernel_value_type?
  typedef double charge_type;

  //! Target type
  typedef Vec<3,double> target_type;
  //! Result type associated with each target
  //! The product of the kernel_value_type and the charge_type
  // TODO: Infer from std::result_of<charge_type * kernel_value_type>::type?
  typedef double result_type;

  /** Kernel evaluation
   * K(t,s) where t is the target
   *          and s is the source.
   *
   * @param[in] t,s  The target and source to evaluate the kernel
   * @return         The Kernel value, K(t,s)
   */
  inline kernel_value_type operator()(const target_type& t,
                                      const source_type& s) const {
    (void) t;
    (void) s;
    return kernel_value_type(0);
  }

  /** Optional Kernel value source and target transposition
   * K(t,s) -> K(s,t)
   * Often, a kernel has a symmetry in s and t that can be computed faster than
   * by calling the evaluation operator. If this function is implemented, the
   * computation may use it to prevent uneccessary calls to the evaluation
   * operator and accelerate the P2P interactions.
   *
   * @param[in] kts  A kernel value that was returned from operator()(t,s)
   * @returns        The value of operator()(s,t)
   * @note           If this function is implemented, then it must
   *                 be the case that std::is_same<source_type,target_type>
   */
  inline kernel_value_type transpose(const kernel_value_type& kts) const {
    return kts;
  }
};
